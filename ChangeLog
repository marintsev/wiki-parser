2016-02-14  Myron Marintsev  <veritas@debian.mobile>

	* wiki-parser.c (newlines). Считает количество \n в строке, чтобы показать в какой строке ошибка.

	* wiki-parser.c (wiki_tag_open, wiki_tag_close,title,wiki_text). Собирает текст внутри тэга <title>.

	* wiki-parser.c (wiki_free_stack). Если нет всех закрывающихся тэгов, то была утечка памяти.

	* parser.c (Set,Ident,CloseTag). Исправление, чтобы возвращала EOL.

	* make_list.sh. Проходится по всем wiki[1-4].xml и создаёт wiki[1-4].lst со списком статей длиной < 128 байт.

	* Makefile (debug,release,all). Не только debug можно собрать теперь.

	* wiki-parser.c (main). Показывает деревом открытие и закрытие тэгов.

	* wiki-parser.c (main). Если есть параметр, то читает этот файл, если нет -- то выходит с ошибкой. line увеличивается в два раза, если это необходимо.

	* wiki-parser.c (done). Функция, которая освобождает line и f. Проблемы с atexit.

	* wiki-parser.c (NEED_MORE). Специальную константу возвращает consume, если обнаруживает, что буффер мог бы быть разобран, если был бы длиннее.

	* parser.c (CloseTag). Освобождает прочитанное имя, если неуспешно разобрала.

	* parser.c (OpenTag). Освобождает все поля open_tag, что заполнила, если неуспешно разобрала.

	* parser.c (Attribute). Освобождает все поля attr, что заполнила, если неуспешно разобрала.

	* parser.c (AttrName). Освобождает attr->name и attr->namespace, если неуспешно разобрала.

	* parser.c (Text). Освобождает буфер, если неуспешно разобрала.

	* parser.c (String). Освобождает буфер, если неуспешно разобрала.

	* parser.c (Ident). Освобождает буфер, если неуспешно разобрала.

	* open_tag.c (open_tag_free). Освобождает и имя и список атрибутов, но не себя.

	* main.h. Делает include stdlib.h, stdio.h, string.h.

	* attr.c (attr_done). Освобождает всё, кроме самой структуры.

	* attr.c (attr_init). Устанавливает всё в NULL.

	* wiki-parser.c. Производительность работы вхолостую: 477 Mbps (debug), 1424 Mbps (release).

	* parser.c (CloseTag). Закрывающий тэг.

	* parser.c (IdentChar1, IdentCharn, _IdentChar1, _IdentCharn). Имя тэга может содержать цифры.

	* wiki-parser.c (consume). Берёт из строки либо открывающий тэг, либо текст.
	// int consume( struct xml_walker * walker, char ** str )
	И сдвигает вправо *str, если это было успешно.
	Возвращает количество потреблённых знаков.
	Либо EOL, если строка окончилась.
	Либо FAILURE, если передан NULL или разобрать не удаётся.

	* wiki-parser.c (struct xml_walker). Поля-функции text и error.
	void (*text) ( char * text )
	void (*error)( char * at )

	* wiki-parser.c (text_print). Печатает результат функции Text.
	Текст может быть NULL, поэтому нужна особая функция.

	* parser.c (Text). Разбирает непустой текст между тэгами.

	* parser.c (EOL,FAILURE). EOL, FAILURE перенесены в parser.h

	* wiki-parser.c. Читает первую строку файла и разбирает её.

	* wiki-parser.c (struct xml_walker). Наметки для потокового парсера.

	* wiki-parser.c (attr_print). Отображает атрибуты и с namespace.
	Соответственно, изменилась и эта функция, чтобы отображать
	атрибуты с namespace.

	* parser.h (struct attr). Добавил поле char * namespace.
	Соответственно, появилось поле char * namespace.

	* parser.c (AttrName). Разбирает имена как с namespace, так и без него.
	Разбирает как имя как с namespace ("xmlns:xsi", например),
	так и без него ("xsi", например).

	* parser.c (OpenTag). Парсер открывающего и однострочного тэгов.
	Разбирает как обычный открывающий тэг, так и однострочный.

	* parser.c: Функции _p, Ident, String, Attribute.

